import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Renderer2, Input, HostListener } from '@angular/core';
import { BACKSPACE, DELETE } from '../../../free/utils/keyboard-navigation';
var KeyCode;
(function (KeyCode) {
    KeyCode[KeyCode["backspace"] = BACKSPACE] = "backspace";
    KeyCode[KeyCode["delete"] = DELETE] = "delete";
})(KeyCode || (KeyCode = {}));
let InputAutoFillDirective = class InputAutoFillDirective {
    constructor(el, rndr) {
        this.el = el;
        this.rndr = rndr;
    }
    onKeyUp(evt) {
        // tslint:disable-next-line: deprecation
        if (!this.opts.enabled || evt.keyCode === KeyCode.backspace || evt.keyCode === KeyCode.delete) {
            return;
        }
        const val = this.getInputValue();
        const ews = this.endsWith(val, this.opts.separator);
        const parts = val.split(this.opts.separator);
        const idx = parts.length - 1;
        if (val.indexOf(this.opts.separator + this.opts.separator) !== -1 || idx > 2) {
            return;
        }
        if (!ews &&
            (val.length === this.getPartLength(0) ||
                val.length === this.getPartLength(0) + this.getPartLength(1) + this.opts.separator.length)) {
            this.setInputValue(val + this.opts.separator);
        }
        else if (ews &&
            parts[idx - 1].length < this.getPartLength(idx - 1) &&
            this.isNumber(parts[idx - 1]) &&
            (this.isDay(idx - 1) || this.isMonth(idx - 1))) {
            this.setInputValue(this.insertPos(val, val.length - 2, '0'));
        }
        else if (parts[idx].length < this.getPartLength(idx) &&
            this.isNumber(parts[idx]) &&
            ((Number(parts[idx]) > 3 && this.isDay(idx)) || (Number(parts[idx]) > 1 && this.isMonth(idx)))) {
            this.setInputValue(this.insertPos(val, val.length - 1, '0') + (idx < 2 ? this.opts.separator : ''));
        }
    }
    endsWith(val, suffix) {
        return val.indexOf(suffix, val.length - suffix.length) !== -1;
    }
    insertPos(str, idx, val) {
        return str.substr(0, idx) + val + str.substr(idx);
    }
    getPartLength(idx) {
        return this.opts.formatParts[idx].length;
    }
    isNumber(val) {
        return val.match(/[1-9]/) !== null;
    }
    isDay(idx) {
        return this.opts.formatParts[idx].indexOf('d') !== -1;
    }
    isMonth(idx) {
        return (this.opts.formatParts[idx].indexOf('m') !== -1 && this.opts.formatParts[idx].length === 2);
    }
    getInputValue() {
        return this.el.nativeElement.value;
    }
    setInputValue(val) {
        this.rndr.setProperty(this.el.nativeElement, 'value', val);
    }
};
InputAutoFillDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], InputAutoFillDirective.prototype, "opts", void 0);
__decorate([
    HostListener('keyup', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], InputAutoFillDirective.prototype, "onKeyUp", null);
InputAutoFillDirective = __decorate([
    Directive({
        selector: '[mdbInputAutoFill]',
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2])
], InputAutoFillDirective);
export { InputAutoFillDirective };
//# sourceMappingURL=data:application/json;base64,